[build-system]
requires = ["setuptools == 69.0.3"]
build-backend = "setuptools.build_meta"

[project]
name = "zefir_api"
dynamic = ["version"]
authors = [
    {name = "Narodowe Centrum Badań Jądrowych", email = "office@idea.edu.pl"},
]
readme = "README.md"
license = {file = "LICENSE.txt"}
classifiers = [
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "fastapi~=0.103.2",
    "uvicorn~=0.23.2",
    "gunicorn~=21.2.0",
    "zefir-analytics==0.3.1",
    "geopandas==0.14.1",
    "pandas==2.0.1",
    "shapely==2.0.2",
    "pydantic==2.6.0",
    "starlette==0.27.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit",
    "pytest==7.4.4",
    "httpx",
    "black==24.2.0",
    "pytest-cov",
    "pytest-mock",
    "pylama[radon,mypy,toml]",
    "tox",
]

[tool.setuptools.dynamic]
version = {attr = "zefir_api.__version__"}

[tool.setuptools.packages.find]
include = ["zefir_api*"]
exclude = ["docs*", "tests*"]

[tool.bumpversion]
current_version = "0.3.1"
commit = true
tag = false
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = [
    "{major}.{minor}.{patch}",
]

[[tool.bumpversion.files]]
filename = "zefir_api/__init__.py"

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false

[tool.mypy-tests]
disallow_untyped_decorators = false

[tool.tox]
legacy_tox_ini = """
    [tox]
    envlist = py311
    isolated_build = True

    [testenv]
    usedevelop = True
    deps = .[dev]

    [testenv:unit]
    commands =
            python -m pytest -vvv --cov-report term --cov-report xml:coverage.xml \
             --cov=zefir_api --junitxml=report.xml tests/unit

    [testenv:fast_integration]
    commands =
            python -m pytest -vvv -m "not long_test" tests/integration

    [testenv:integration]
    commands =
            python -m pytest -vvv tests/integration

    [coverage]
    xml_report = true
    html_report = true

    [pytest]
    addopts = --cov-report term --cov-report xml:coverage.xml
"""
[tool.pylama]
linters = "mccabe,pycodestyle,pyflakes,radon,mypy"

[tool.pylama.linter.pycodestyle]
max_line_length = 120
[tool.pylama.linter.pylint]
max_line_length = 120
[tool.pylama.linter.radon]
no_assert = true
